<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pudongli.github.io</id>
    <title>strider</title>
    <updated>2020-08-12T07:17:46.873Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pudongli.github.io"/>
    <link rel="self" href="https://pudongli.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://pudongli.github.io/images/avatar.png</logo>
    <icon>https://pudongli.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, strider</rights>
    <entry>
        <title type="html"><![CDATA[golang垃圾收集器]]></title>
        <id>https://pudongli.github.io/erKeo3HJm/</id>
        <link href="https://pudongli.github.io/erKeo3HJm/">
        </link>
        <updated>2020-08-12T06:46:42.000Z</updated>
        <content type="html"><![CDATA[<p>本文是读draveness大佬的文章后的摘要，原文地址 <a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/">https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/</a></p>
<h1 id="go垃圾收集器">GO垃圾收集器</h1>
<h2 id="设计原理">设计原理</h2>
<h3 id="内存管理的组件">内存管理的组件</h3>
<pre><code>用户程序Mutator通过内存分配器Allocator在堆上申请内存，而垃圾收集器Collector负责回收堆上的内存空间，内存分配器和垃圾收集器共同管理程序中的堆内存空间
</code></pre>
<h4 id="标记清除">标记清除</h4>
<pre><code>标记清除Mark-Sweep算法是最常见的垃圾收集算法。标记清除收集器是跟踪式垃圾收集器，其执行过程可分成Mark和Sweep两个阶段：
	1、标记阶段：从根对象出发查找并标记堆中所有存活的对象；
	2、清除阶段：遍历堆中所有的对象，回收未被标记的垃圾对象并将回收的内存加入到空闲链表中
</code></pre>
<p><img src="https://pudongli.github.io/post-images/1597215066449.png" alt="" loading="lazy"><br>
<strong>标记清除的标记阶段</strong><br>
<img src="https://pudongli.github.io/post-images/1597215073028.png" alt="" loading="lazy"><br>
<strong>标记清除的清除阶段</strong></p>
<pre><code>使用标记清除算法，垃圾收集器需要从垃圾收集的根节点出发，递归遍历这个对象指向的子节点并将所有可达的对象标记为存活；标记结束后，垃圾收集器会依次遍历堆中的对象并清除其中的垃圾。
缺点：
* 需要STW
* 标记需要扫描整个heap
* 清楚数据会产生heap碎片
</code></pre>
<h4 id="三色抽象">三色抽象</h4>
<pre><code>为了解决标记清除算法带来的长时间STW，多数现代追踪式垃圾收集器都会实现三色标记算法的变种以缩短STW的时间。三色标记算法将程序中的对象分为白色、灰色、黑色三类
* 白色对象-潜在的垃圾，其内存可能会被垃圾收集器回收；
* 黑色对象-活跃的对象，包括不存在任何外部引用指针的对象已经从根可达的对象；
* 灰色对象-活跃的对象，因为存在指向白色对象的外部指针，垃圾收集器会扫描这些对象的子对象；
</code></pre>
<h4 id="屏障技术">屏障技术</h4>
<pre><code>  * 强三色不变性-黑色对象不会指向白色对象，只会指向灰色对象或者黑色对象；
  * 弱三色不变性-黑色对象指向的白色对象必须包含一条从灰色对象经由多个白色对象的可达路径；
</code></pre>
<h5 id="插入写屏障">插入写屏障</h5>
<pre><code>在A对象引用B对象的时候，B对象被标记为灰色。满足强三色不变性
</code></pre>
<pre><code>添加下游对象(当前下游对象slot, 新下游对象ptr) {
    //1
    标记灰色(新下游对象ptr)
    //2 
    当前下游对象slot = 新下游对象ptr
}
</code></pre>
<pre><code>插入写屏障机制在栈空间的对象操作中不使用，而仅仅作用于堆空间对象的操作中。
在堆空间扫描结束以后要对栈重新进行三色标记扫描。需要STW，直到栈空间标记结束。
</code></pre>
<h5 id="删除写屏障">删除写屏障</h5>
<pre><code>被删除的对象如果自身是白色或者灰色，那么被标记为灰色。满足弱三色不变性
</code></pre>
<pre><code>添加下游对象(当前下游对象slot， 新下游对象ptr) {
    //1
    if (当前下游对象slot是灰色 || 当前下游对象slot是白色) {
        标记灰色(当前下游对象slot) //slot为被删除对象， 标记为灰色
    }
    //2 
    当前下游对象slot = 新下游对象ptr
}
</code></pre>
<pre><code>删除写屏障回收精度低，一个对象即使被删除了最后一个指向它的指针，也仍然可以活过这一轮，在下一轮gc中被清理掉。
</code></pre>
<h5 id="混合写屏障">混合写屏障</h5>
<pre><code>实现步骤
1、gc开始时将栈上的对象全部扫描并标记为黑色，（之后不再进行第二次扫描，无需STW）
2、GC期间，任何堆上创建的新对象均标记为黑色；
3、被删除的对象标记为灰色；
4、被添加的对象标记为灰色；
</code></pre>
<pre><code>
添加下游对象(当前下游对象slot, 新下游对象ptr) {
    //1
    标记灰色(当前下游对象slot) //只要当前下游对象被移走，就标记灰色
    //2
    标记灰色(新下游对象ptr)
    //3 
    当前下游对象slot = 新下游对象ptr
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[golang内置的print/println函数和fmt、log标准库包中的打印函数有什么区别]]></title>
        <id>https://pudongli.github.io/HOiLnuUYA/</id>
        <link href="https://pudongli.github.io/HOiLnuUYA/">
        </link>
        <updated>2020-08-12T06:45:28.000Z</updated>
        <content type="html"><![CDATA[<p>1.内置的print/println函数总是写入到标准错误(os.Stderr)。fmt标准包里的打印函数总是写入到标准输出(os.Stdout)。log里的打印函数默认写入标准错误，可以通过log.SetOutput函数来设置。<br>
2.print/println函数的调用不能接受数组和结构体参数。<br>
3.对于组合类型的参数，内置的print/println函数将输出参数的底层值部的地址，而fmt和log将输出参数的字面值。<br>
4.在Go1.14版本对于标准编译器，调用print/println函数不会使调用参数引用的指针的值逃逸到堆上，而fmt和log标准库中打印函数将使调用参数引用的值逃逸到堆上。<br>
5.如果一个实参有String() string或Error() string方法，那么fmt和log标准库包里的打印函数在打印参数时会调用这两个方法，而内置的print/println函数则会忽略参数的这些方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[golang中slice扩容]]></title>
        <id>https://pudongli.github.io/-lmXlat1b/</id>
        <link href="https://pudongli.github.io/-lmXlat1b/">
        </link>
        <updated>2020-08-12T06:21:40.000Z</updated>
        <content type="html"><![CDATA[<p>slice扩容是在slice使用过程中经常使用到的场景，扩容发生在append的时候，当slice的cap不足以容纳新的元素时，就会进行growSlice。当前场景下go版本为1.14.2<br>
slice的扩容分为常规场景和非常规场景，先看一下常规场景下：</p>
<pre><code>slice1 := make([]int,1,)
fmt.Println(&quot;cap of slice1&quot;,cap(slice1))
slice1 = append(slice1,1)
fmt.Println(&quot;cap of slice1&quot;,cap(slice1))
slice1 = append(slice1,2)
fmt.Println(&quot;cap of slice1&quot;,cap(slice1))

fmt.Println()

slice1024 := make([]int,1024)
fmt.Println(&quot;cap of slice1024&quot;,cap(slice1024))
slice1024 = append(slice1024,1)
fmt.Println(&quot;cap of slice1024&quot;,cap(slice1024))
slice1024 = append(slice1024,2)
fmt.Println(&quot;cap of slice1024&quot;,cap(slice1024))


输出：
cap of slice1 1
cap of slice1 2
cap of slice1 4

cap of slice1024 1024
cap of slice1024 1280
cap of slice1024 1280
</code></pre>
<p>然后看一下非常规场景：</p>
<pre><code>a := []byte{1, 0}
a = append(a, 1)
fmt.Println(&quot;cap of a is &quot;, cap(a))

b := []int{1, 1}
b = append(b, 4, 5, 6)
fmt.Println(&quot;cap of b is &quot;, cap(b))

c := []int32{1, 1}
c = append(c, 2, 5, 6)
fmt.Println(&quot;cap of c is &quot;, cap(c))

输出
8
6
8
</code></pre>
<p>下面说一下slice扩容的步骤，并解答非常规场景下的输出。<br>
slice的扩容主要分为3步<br>
1、计算预计大小<br>
如果预估扩容后的slice的容量大于oldCap的2倍，则预估容量为扩容后的大小<br>
如果预估扩容后的slice的容量小于oldCap的2倍<br>
a:如果oldCap小于1024，则预估容量为oldCap<em>2<br>
b:如果oldCap大于1024，则预估容量为oldCap</em>1.25<br>
2、预估内存大小<br>
计算扩容后需要占用的内存大小：在64位机器下byte为1字节，int为8字节，int32为4字节，非常规场景下的b的预估内存为5*8=40<br>
3、计算最终容量大小<br>
进行内存对齐<br>
<code>capmem = roundupsize(uintptr(newcap) * sys.PtrSize)</code> roundupsize向上取整<br>
<a href="https://golang.org/src/runtime/sizeclasses.go">https://golang.org/src/runtime/sizeclasses.go</a><br>
<img src="https://pudongli.github.io/post-images/1597213503857.png" alt="" loading="lazy"><br>
sizeclass中定义了对象大小，最小8b，最大为32K<br>
b的预估大小为40，这里没有40的类型，于是选择大于40字节，并最接近大小的48字节。48/8=6，所以b扩容后的cap为6</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录一次k8s下部署的tomcat服务报错]]></title>
        <id>https://pudongli.github.io/w0dyewgIS/</id>
        <link href="https://pudongli.github.io/w0dyewgIS/">
        </link>
        <updated>2020-08-12T06:08:06.000Z</updated>
        <content type="html"><![CDATA[<h4 id="在k8s集群内部署了一个tomcat服务配置nodeport供外部访问-页面报错找不到configjs">在k8s集群内部署了一个tomcat服务，配置nodeport供外部访问。页面报错找不到config.js</h4>
<figure data-type="image" tabindex="1"><img src="https://pudongli.github.io/post-images/1597212531069.png" alt="" loading="lazy"></figure>
<h4 id="进入tomcat容器后在rootconfig目录下可以找到config这个文件权限是777-进一步ls-la发现configjs是一个软链接指向的是dataconfigjsdata是一个带有时间戳的目录的软链接这个目录下存放的是真实文件">进入tomcat容器后，在ROOT/config目录下可以找到config这个文件，权限是777。进一步ls -la发现config.js是一个软链接，指向的是..data/config.js，..data是一个带有时间戳的目录的软链接，这个目录下存放的是真实文件。</h4>
<h4 id="为什么tomcat读不到configjs呢原因是tomcat需要在配置文件中配置allowlinkingtrue才可以使用软链接默认是不支持的">为什么tomcat读不到config.js呢，原因是tomcat需要在配置文件中配置allowLinking=true才可以使用软链接，默认是不支持的。</h4>
<h4 id="当容器第一次启动前kubelet先将configmap中的内容下载到pod对应的volume目录下比如varlibkubeletpodspod-uidvolumeskubernetesio~configmapextra-cfg-为了保证对此volume下内容的更新是原子操作更新目录时所以会通过软链接的方式进行更新">当容器第一次启动前，kubelet先将configmap中的内容下载到Pod对应的volume目录下，比如/var/lib/kubelet/pods/{POD UID}/volumes/kubernetes.io~configmap/extra-cfg。为了保证对此volume下内容的更新是原子操作（更新目录时），所以会通过软链接的方式进行更新。</h4>
<p>参考：<a href="https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/">https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于client-go报错]]></title>
        <id>https://pudongli.github.io/72UPyoiW/</id>
        <link href="https://pudongli.github.io/72UPyoiW/">
        </link>
        <updated>2020-08-12T05:35:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="go-get-client-go时报错">go get client-go时报错</h3>
<pre><code>k8s.io/client-go/rest

../../../../goworkspace/pkg/mod/k8s.io/client-go@v11.0.0+incompatible/rest/request.go:598:31: not enough arguments in call to watch.NewStreamWatcher

have (*versioned.Decoder)

want (watch.Decoder, watch.Reporter)
</code></pre>
<h3 id="解决方法">解决方法</h3>
<p>可以尝试手动替换k8s.io/apimachinery@v0.17.0为k8s.io/apimachinery@release-1.14来解决。在终端执行# go mod download -json k8s.io/apimachinery@release-1.14最终gomod的关于k8s的所有依赖文件如下所示：</p>
<pre><code>1 require (
2 　　k8s.io/api v0.17.0 // indirect
3 　　k8s.io/apimachinery v0.17.0
4 　　k8s.io/client-go v11.0.0+incompatible
5 　　k8s.io/utils v0.0.0-20191114184206-e782cd3c129f // indirect
6 　　sigs.k8s.io/yaml v1.1.0 // indirect
7 )
8
9 replace (
10     k8s.io/api =&gt; k8s.io/api v0.0.0-20191004102349-159aefb8556b
11     k8s.io/apiextensions-apiserver =&gt; k8s.io/apiextensions-apiserver v0.0.0-20191004105649-b14e3c49469a
12     k8s.io/apimachinery =&gt; k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689
13     sigs.k8s.io/controller-runtime =&gt; sigs.k8s.io/controller-runtime v0.3.0
14 )
</code></pre>
]]></content>
    </entry>
</feed>